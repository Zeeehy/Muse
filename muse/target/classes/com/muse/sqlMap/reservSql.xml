<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.muse.reserv.mapper.ReservMapper">
	<!-- 뮤지컬 이름 및 장소 가져오기 -->
	<select id="getMusicalInfo" resultType="java.util.Map">
		SELECT 
        m.m_title AS M_TITLE,
        m.m_poster AS M_POSTER,
        m.M_STARTDATE AS M_STARTDATE,
        m.M_ENDDATE AS M_ENDDATE,
        m.m_time AS M_TIME,
        m.m_age AS M_AGE,         
        mh.mh_name AS MH_NAME
    FROM musical m
    JOIN musical_hall mh ON m.mh_code = mh.mh_code
    WHERE m.m_code = #{m_code}
	</select>
	<!-- 날짜 가져오기 -->
	<select id="getMusicalDate" resultType="java.lang.String">
		SELECT mo_date_with_day
		FROM (
		    SELECT DISTINCT TO_CHAR(mo.mo_date, 'YYYY-MM-DD (DY)', 'NLS_DATE_LANGUAGE=KOREAN') AS mo_date_with_day
		    FROM musical m
		    JOIN musical_option mo ON m.m_code = mo.m_code
		    WHERE m.m_code = #{m_code}
		    AND mo.mo_date >= TRUNC(SYSDATE)
		    
		)
		ORDER BY mo_date_with_day
	</select>
	<!-- 날짜에 해당되는 시간 가져오기 -->
	<select id="getMusicalTimeByDate" parameterType="map" resultType="java.lang.String">
	    SELECT DISTINCT mo_time AS Time
	    FROM musical_option
	    WHERE mo_date = TO_DATE(#{selectedDate}, 'YYYY-MM-DD') and m_code = #{m_code}
	    ORDER BY mo_time ASC
	</select>
	<!-- 공연별 최대 매수 가져오기(파라미터) -->
	<select id="getMusicalMaxTicket" parameterType="String" resultType="int">
	    SELECT m_maxticket
	    FROM musical
	    WHERE m_code = #{m_code}
	</select>
	<!-- 좌석등급 가져오기 -->
	<select id="getMusicalSeatList" resultType="map">
	    SELECT s.*, sg.sg_name 
	    FROM seat s 
	    JOIN seat_grade sg ON s.sg_code = sg.sg_code 
	    ORDER BY sg.sg_name DESC
	</select>
	
	<!-- 좌석 -->
	<select id="seatLayoutSelectReserv" resultType="com.muse.seat.model.SeatLayoutDTO" parameterType="map">
		SELECT *
		FROM musical_hall_layout hl
		JOIN seat_layout sl ON hl.lt_code = sl.lt_code
		where sl_bind=#{sl_bind} AND MHL_CODE = #{mhl_code}
		order by sl_code
	</select>
	<!-- 전체좌석에서 예매가능(1)/예매불가능(0) 좌석 가져오기 -->
	
	<select id="getRealSeatReserv" parameterType="map" resultType="com.muse.seat.model.SeatDTO">
				   SELECT * FROM (
		    SELECT s.*, 
		           CASE 
		               WHEN reserved_seats.s_code IS NOT NULL THEN '0' 
		               ELSE '1' 
		           END AS reservation_status
		    FROM seat s
		    LEFT JOIN (
		        SELECT DISTINCT s.s_code
		        FROM seat s
		        JOIN booking_detail bd ON s.s_code = bd.s_code
		        JOIN booking b ON bd.b_code = b.b_code
		        JOIN musical_option mo ON b.mo_code = mo.mo_code
		        WHERE mo.m_code = #{m_code}
		        <if test="selectedDate != null and selectedDate != '' and selectedTime != null and selectedTime != ''">
		            AND mo.mo_date = TO_DATE(SUBSTR(#{selectedDate}, 1, 10), 'YYYY-MM-DD')
		            AND mo.mo_time = #{selectedTime}
		        </if>
		    ) reserved_seats ON s.s_code = reserved_seats.s_code
		    WHERE s.m_code = #{m_code}  -- WHERE 절을 JOIN 구문 뒤로 이동
		) sub_query
		ORDER BY s_code
	</select>
	
	<select id="getRealSeatOnlyReserv" parameterType="map" resultType="com.muse.seat.model.SeatDTO">
	   SELECT * FROM (
	       SELECT s.*, 
	              CASE 
	                  WHEN reserved_seats.s_code IS NOT NULL THEN '0' 
	                  ELSE '1' 
	              END AS reservation_status
	       FROM seat s
	       LEFT JOIN (
	           SELECT DISTINCT s.s_code
	           FROM seat s
	           JOIN booking_detail bd ON s.s_code = bd.s_code
	           JOIN booking b ON bd.b_code = b.b_code
	           JOIN musical_option mo ON b.mo_code = mo.mo_code
	           WHERE mo.m_code = #{m_code}
	           AND bd.bd_state = 1
	           
	           <if test="selectedDate != null and selectedDate != '' and selectedTime != null and selectedTime != ''">
	               AND mo.mo_date = TO_DATE(SUBSTR(#{selectedDate}, 1, 10), 'YYYY-MM-DD')
	               AND mo.mo_time = #{selectedTime}
	           </if>
	       ) reserved_seats ON s.s_code = reserved_seats.s_code
	       WHERE s.m_code = #{m_code}  -- 수정된 부분
	   ) sub_query
	   <if test="reserved != null and reserved != ''">
	       WHERE sub_query.reservation_status = '0'
	   </if>
	   ORDER BY s_code
	</select>
	
	<select id="sectionSelectReserv" resultType="java.lang.String" parameterType="map">
		SELECT distinct sl_section
		FROM musical_hall_layout hl
		JOIN seat_layout sl ON hl.lt_code = sl.lt_code
		where sl_bind=#{sl_bind} AND MHL_CODE = #{mhl_code}
		
	</select>
	
	<select id="bindByallFloorSelectReserv" resultType="Integer" parameterType="map">
		SELECT distinct sl_floor
		FROM musical_hall_layout hl
		JOIN seat_layout sl ON hl.lt_code = sl.lt_code
		where sl_bind=#{sl_bind} AND MHL_CODE = #{mhl_code}
	</select>
	
	<resultMap id="MaxRowResultMap" type="java.util.HashMap">
	    <result property="sl_floor_key" column="sl_floor_key"/>
	    <result property="max_row" column="max_row"/>
	</resultMap>
	
	<select id="max_rowSelectReserv" resultMap="MaxRowResultMap" parameterType="Integer">
	      SELECT sl_floor AS sl_floor_key, MAX(sl_row) AS max_row
	    FROM seat_layout sl, MUSICAL_HALL_LAYOUT mhl
	    WHERE 
            sl.lt_code = mhl.mhl_code and
        MHL_CODE = #{mhl_code}
	    GROUP BY sl_floor
	    ORDER BY sl_floor
	</select>
	
<!-- 	<select id="getRealSeatReserv" resultType="com.muse.seat.model.SeatDTO" parameterType="String">
		select *
		from seat
		where m_code = #{m_code}
	</select> -->
	
	<select id="getMhl_codeReserv" resultType="Integer" parameterType="String">
		select mhl_code
		from musical_hall_layout
		where mh_code=#{mh_code}
	</select>	
	
	<!-- 좌석이름 / 좌석가격 가져오기 -->
	<select id="getMusicalPrice" parameterType="string" resultType="map">
	    SELECT DISTINCT sg.sg_name as sg_name, sp.sp_price as sp_price
	    FROM seat_price sp
	    INNER JOIN seat_grade sg ON sp.sg_code = sg.sg_code
	    WHERE sp.m_code = #{m_code}
	    ORDER BY sp.sp_price desc
	</select>
	
	<!-- 해당날짜와 시간에 따른 잔여좌석 가져오기 -->
	<select id="getRemainingSeat" parameterType="map" resultType="map">
	SELECT 
	    sg.sg_name AS grade,
	    COUNT(DISTINCT s.s_code) - COUNT(DISTINCT bd.s_code) AS count
	FROM 
	    musical m
	JOIN 
	    musical_option mo ON m.m_code = mo.m_code
	JOIN 
	    seat s ON m.m_code = s.m_code
	JOIN 
	    seat_grade sg ON s.sg_code = sg.sg_code
	LEFT JOIN 
	    booking b ON mo.mo_code = b.mo_code
	LEFT JOIN 
	    booking_detail bd ON b.b_code = bd.b_code
	                     AND s.s_code = bd.s_code
	WHERE 
	    m.m_code = #{m_code}
	    AND mo.mo_date = TO_DATE(SUBSTR(#{selectedDate}, 1, 10), 'YYYY-MM-DD')
	    AND mo.mo_time = #{selectedTime}
	GROUP BY 
	    sg.sg_name
	ORDER BY 
	    sg.sg_name
	</select>
	
	<!-- 예매된 좌석 가져오기 
	<select id="getBookedSeats" parameterType="map" resultType="string">
	    SELECT s.s_code
	    FROM seat s
	    JOIN booking_detail bd ON s.s_code = bd.s_code
	    JOIN booking b ON bd.b_code = b.b_code
	    JOIN musical_option mo ON b.mo_code = mo.mo_code
	    WHERE mo.m_code = #{m_code}
	    AND mo.mo_date = #{selectedDate}
	    AND mo.mo_time = #{selectedTime}
	</select>-->
	
	<!-- 해당 공연장 좌석 리뷰 평균평점 조회 -->
	<select id="getMusicalSeatByHall" resultType="Double" parameterType="map">
<!-- 	SELECT 

	    ROUND(AVG(sr.sr_score), 1) as avg_score
	FROM 
	    musical_hall mh
		JOIN MUSICAL M ON mh.mh_code = m.mh_code
	    JOIN musical_hall_layout mhl ON mh.mh_code = mhl.mh_code
	    JOIN seat s ON mhl.mhl_code = s.mhl_code
	    LEFT JOIN booking_detail bd ON s.s_code = bd.s_code
	    LEFT JOIN seat_review sr ON bd.bd_code = sr.bd_code
	WHERE 
	    m.m_code = #{m_code}
	    and s.s_code = #{s_code} -->
	    
	    	select ROUND(AVG(sr_score), 1) as avg_score
	from seat_review 
	where bd_code in (
	    select bd_code
	    from booking_detail
	    where s_code in
	    (
	        select s_code
	        from seat s
	        where s_section=#{s_section} and s_row=#{s_row} and s_floor=#{s_floor} and s_position=#{s_position} and mhl_code = (select mhl_code from musical_hall_layout where mh_code=#{mh_code})
	        
	    ) 
	) 
	</select>
	
	<!-- 해당 뮤지컬 가격 가져오기 -->
	<select id="getMusicalSeatPrice" resultType="map" parameterType="String">
	SELECT
	    sp.SP_CODE,
	    sp.M_CODE,
	    sg.SG_NAME,
	    sp.SP_PRICE
	FROM SEAT_PRICE sp
	JOIN SEAT_GRADE sg ON sp.SG_CODE = sg.SG_CODE
	WHERE sp.M_CODE = #{m_code}
	ORDER BY sp.SP_CODE;
	</select>
	
	<!-- 사용자 포인트 조회하기 -->
	<select id="getPoint" resultType="int">
	SELECT
	    NVL(SUM(CASE 
	        WHEN p.PT_CATEGORY = 1 THEN p.PT_POINT  
	        WHEN p.PT_CATEGORY = 2 THEN -p.PT_POINT
	    END), 0) as POINT
	FROM
	    USERS u
	LEFT JOIN
	    POINT p
	ON
	    u.U_ID = p.U_ID
	WHERE
	    u.U_ID = #{s_id}
	</select>
	
	<!-- 사용한 포인트 인서트 -->
	<insert id="insertUsePoint" parameterType="map">
	INSERT INTO POINT (
        PT_CODE,      <!-- 포인트 코드 (시퀀스) -->
        U_ID,        <!-- 사용자 ID -->
        PT_CATEGORY,      <!-- 구분유형 -->
        PT_CATEGORYCODE,<!-- 관련코드 (예매코드) -->
        PT_POINT      <!-- 변동포인트 -->
    ) VALUES (
        POINT_PT_CODE.NEXTVAL,
        #{u_id},
        #{pt_category},
        #{pt_categorycode},
        #{pt_point}
    )
	</insert>
	
	<!-- 세션에 있는 아이디로 회원정보 불러오기 -->
	<select id="getMemberInfo" parameterType="String" resultType="map">
		SELECT U_NAME,U_PNUM,U_EMAIL
		FROM USERS
		WHERE U_ID = #{s_id, jdbcType=VARCHAR}
	</select>
	
	<!-- booking (예매) -->
	<insert id="insertBooking" parameterType="map">
		INSERT INTO booking (
        b_code, u_id, mo_code, b_date, 
        b_total_price, b_type, b_count, b_state
    	) VALUES (
        'b_'||booking_b_code.nextval, #{u_id}, #{mo_code}, sysdate, 
        #{b_total_price},'CARD', #{b_count}, #{b_state}
    )
	</insert>
	
	<!-- 방금 insert된 booking의 b_code 조회 (예매상세를 위한) -->
	<select id="getBookingCode" resultType="String">
		SELECT 'b_'||booking_b_code.currval FROM dual
	</select>
	
	<!-- booking_detail (예매상세) -->
	<insert id="insertBookingDetail" parameterType="map">
		INSERT INTO booking_detail (
        bd_code, b_code, s_code, d_code, bd_state, bd_price
	    ) VALUES (
	        'bd_'||booking_b_code.nextval, #{b_code}, #{s_code},#{d_code},1, #{ticket_price}
	    )
	</insert>
	
	<select id="getOptionCode" parameterType="map" resultType="String">
		select mo_code
		from musical_option
		where m_code = #{m_code} and mo_time = #{mo_time} and mo_date = to_date(#{mo_date},'YYYY-MM-DD')
	</select>
	
	<select id="getSeatCodeForReserv" parameterType="map" resultType="Integer"> 
	
		select s_code
		from seat
		where m_code = #{m_code} 
		and s_section=#{s_section} 
		and s_row=#{s_row} 
		and s_floor=#{s_floor} 
		and s_position=#{s_position} 
	</select>
</mapper>