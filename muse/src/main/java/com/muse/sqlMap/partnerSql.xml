<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.muse.partner.mapper.partnerSql">
  
  <select id="selectActorName"  resultType="com.muse.partner.model.ActorDTO" parameterType="String">
  	select * from musical_actor where ma_name = #{ma_name}
  </select>

	<select id="selectMusicalList" parameterType="map" resultType="com.muse.partner.model.MusicalDTO">
	     SELECT *
    FROM musical m
    WHERE m.pr_code = #{pr_code}
    AND EXISTS (
        SELECT 1
        FROM service_request sr
        WHERE sr.rs_code = 1
        AND sr.m_code = m.m_code
        AND m.m_startdate <![CDATA[>]]> sysdate
    )
    <if test="seachMusical != null and seachMusical != ''">
        AND m.m_title LIKE '%' || #{seachMusical} || '%'
    </if>
</select>

<select id="selectStartEndDate"  resultType="com.muse.partner.model.MusicalDTO" parameterType="String">
  select m_startDate, m_endDate  from musical where m_code = #{m_code}
  </select>
  
<insert id="insetMuscialDate" parameterType="map">
insert into musical_option values('mo_'||MUSICAL_OPTION_MO_CODE.nextval,#{m_code},#{mo_date},#{mo_time})
</insert>

<select id="selectOptionList"  resultType="com.muse.partner.model.MusicalOptionDTO" parameterType="String">
  select distinct mo_date from musical_option where m_code = #{m_code} order by mo_date
  </select>
  
<select id="selectTimeOptionList" resultType="com.muse.partner.model.MusicalOptionDTO" parameterType="map">
	select mo_time from musical_option where m_code = #{m_code} and mo_date = #{mo_date} 
</select>

<insert id="insertCasting" parameterType="map">
insert into musical_casting values
('mc_'||MUSICAL_CASTING_MC_CODE.nextval,
#{ma_code},
(select mo_code 
from 
musical_option 
where mo_date = 
#{mo_date} and 
mo_time = #{mo_time} and 
m_code = #{m_code}),
#{mc_char})

</insert>
<insert id="insertTicketNotice" parameterType="map">
    insert into open_notice (
        on_code,
        m_code,
        rs_code,
        on_type,
        on_open,
        on_muse_open,
        on_info,
        on_sale,
        on_content,
        on_casting,
        on_img,
        on_etc,
        on_readnum,
        on_viewstate
    ) values (
        'on_' || OPEN_NOTICE_ON_CODE.nextval,
        #{m_code},
        #{rs_code},
        #{on_type},
        #{on_open},
        #{on_muse_open},
        #{on_info},
        #{on_sale},
        #{on_content},
        #{on_casting},
         (select m_detailimg from musical where m_code = #{m_code}),
        #{on_etc},
        0,
        0
    )
</insert>
<select id="selectMusicalHallList"  resultType="com.muse.partner.model.MusicalHallDTO">
	select * from musical_Hall
</select>

<select id="selectSeatGradeList" resultType="com.muse.partner.model.SeatGradeDTO">
	select * from seat_grade
</select>

<insert id="SelectSeatList" parameterType="com.muse.seat.model.SeatDTO">
    INSERT INTO SEAT (
            S_CODE, SG_CODE, M_CODE, MHL_CODE, 
            S_SECTION, S_POSITION, S_ROW, S_FLOOR
        ) 
        VALUES (
            seat_s_code.nextval,
            #{sg_code},
            #{m_code},
            #{mhl_code},
            #{s_section},
            #{s_position},
            #{s_row},
            #{s_floor}
        )
	</insert>
	
	
		<insert id="insertMusical" parameterType="com.muse.partner.model.MusicalDTO">
    INSERT INTO musical (
        M_CODE,
        MH_CODE,
        PR_CODE,
        M_TITLE,
        M_STARTDATE,
        M_ENDDATE,
        M_TIME,
        M_INTIME,
        M_MAXTICKET,
        M_AGE,
        M_OPENDATE,
        M_OPENTIME,
        M_NOTICE,
        M_POSTER,
        M_DETAILIMG,
        M_CALENDAR,
        M_SINGLE,
        M_VIEWSTATE,
        M_REF
    ) VALUES (
        'm_' || MUSICAL_M_CODE.NEXTVAL,  
        #{mh_code},
        #{pr_code}, 
        #{m_title},                     
        #{m_startDate},                  
        #{m_endDate},                    
        #{m_time},                       
        #{m_inTime},                     
        #{m_maxTicket},                  
        #{m_age},                        
        #{m_openDate},                   
        #{m_openTime},                   
        #{m_notice},                     
        #{m_poster},                     
        #{m_detailImg},                 
        #{m_calendar},                  
        #{m_single},                   
        0,                 
        0                       
    )

	</insert>
	
	<select id="selectPartner" resultType="com.muse.partner.model.PartnerDTO" parameterType="String">
	select * from partner where pr_code = #{pr_code} and rs_code = 1
	</select>
	
	<insert id="partnerInsert" parameterType="com.muse.partner.model.PartnerDTO">
		insert into partner values(
		'pr_'||PARTNER_PR_CODE.nextval,
		0,
		#{u_id},
		#{pr_name},
		#{pr_num},
		#{pr_pnum},
		#{pr_email}
		)

	</insert>
	<select id="reviewList" resultType="com.muse.partner.model.MusicalReviewDTO" parameterType="String">
SELECT 
    r.MR_CODE, 
    r.MR_TITLE, 
    r.MR_CONTENT, 
    r.MR_SCORE, 
    r.MR_DATE,
    CASE 
        WHEN bdr.bdr_key IS NOT NULL THEN 3 
        ELSE r.mr_state
    END AS MR_STATE,
    b.u_id
FROM 
    musical_review r
JOIN 
    booking b ON r.B_CODE = b.B_CODE
JOIN 
    musical_option mo ON b.MO_CODE = mo.MO_CODE
JOIN 
    musical m ON mo.M_CODE = m.M_CODE 
LEFT JOIN 
    bbs_delete_request bdr ON r.MR_CODE = bdr.bdr_key AND bdr.pr_code = #{pr_code}
WHERE 
    m.pr_code = #{pr_code}
	</select>
<select id="seachCode" parameterType="map" resultType="int">
    SELECT NVL(MAX(TO_NUMBER(REGEXP_SUBSTR(m_code, '[0-9]+$'))), 0) AS max_idx
	FROM musical
	 WHERE m_code LIKE 'm_%';
</select>


<insert id="insertservRe" parameterType="com.muse.partner.model.ServiceRequestDTO">
	INSERT INTO SERVICE_REQUEST ( 
        SR_CODE, RT_CODE, RS_CODE, M_CODE, RS_DATE, RS_ETC, RS_REASON
    ) 
    VALUES (
        'sr_' || SERVICE_REQUEST_SR_CODE.NEXTVAL,
        #{rt_code},
        #{rs_code},
        #{m_code},
        sysdate,
        '0',
        '0'
    )
    </insert>
    
    <select id="maxMcode" resultType="String">
    <![CDATA[
    SELECT 'm_' || MAX(TO_NUMBER(NVL(REGEXP_SUBSTR(m_code, '[0-9]+$'), '0'))) AS max_m_code
    FROM musical
    WHERE m_code LIKE 'm_%'
    ]]>
</select>

<select id="reviewMuscialList" parameterType="map" resultType="com.muse.partner.model.MusicalReviewDTO">
SELECT 
    r.MR_CODE, 
    r.MR_TITLE, 
    r.MR_CONTENT, 
    r.MR_SCORE, 
    r.MR_DATE,
    CASE 
        WHEN bdr.bdr_key IS NOT NULL THEN 3 
        ELSE r.mr_state
    END AS MR_STATE,
    b.u_id
FROM 
    musical_review r
JOIN 
    booking b ON r.B_CODE = b.B_CODE
JOIN 
    musical_option mo ON b.MO_CODE = mo.MO_CODE
JOIN 
    musical m ON mo.M_CODE = m.M_CODE 
LEFT JOIN 
    bbs_delete_request bdr ON r.MR_CODE = bdr.bdr_key AND bdr.pr_code = #{pr_code}
WHERE 
    m.pr_code = #{pr_code}
    AND m.m_code = #{m_code}
</select>
<update id="updateReview" parameterType="String">
    UPDATE musical_review
    SET mr_state = CASE
                    WHEN mr_state = 0 THEN 1
                    WHEN mr_state = 1 THEN 0
                   END
    WHERE mr_code = #{mr_code}
</update>

<insert id="reveiwDelRe" parameterType="com.muse.partner.model.BbsDeleteRequestDTO">
insert into bbs_delete_request 
    (bdr_code, 
    pr_code, 
    bdr_type, 
    bdr_key, 
    bdr_reason, 
    bdr_state)
values (
    'bdr_' || BBS_DELETE_REQUEST_BDR_CODE.nextval,
    #{pr_code}, 
    1,
    #{bdr_key},
    #{bdr_reason},
    0
)


</insert>


<select id="getMusicalList" parameterType="map" resultType="com.muse.partner.model.MusicalDTO">
    SELECT DISTINCT 
        m.m_title,
        m.m_poster,
        m.m_time,
        m.m_age,
        m.m_notice,
       TO_CHAR(m.m_startdate, 'YYYY-MM-DD') AS m_startdate,
   		TO_CHAR(m.m_enddate, 'YYYY-MM-DD') AS m_enddate,
        mh.mh_name,
        NVL(LISTAGG(ma.ma_name, ', ') WITHIN GROUP (ORDER BY ma.ma_name), '배우 정보 없음') AS ma_name
    FROM musical m
    LEFT JOIN musical_option mo 
        ON m.m_code = mo.m_code
    LEFT JOIN musical_casting mc
        ON mc.mo_code = mo.mo_code
    LEFT JOIN musical_actor ma
        ON mc.ma_code = ma.ma_code
    JOIN musical_hall mh
        ON m.mh_code = mh.mh_code
    JOIN service_request sr
        ON m.m_code = sr.m_code
    WHERE m.pr_code = #{pr_code}
      AND sr.rs_code = 1
      
<if test="performanceStatus == 0">
    AND sysdate BETWEEN m.m_startdate AND m.m_enddate
    AND m.m_viewState = 1
</if>
<if test="performanceStatus == 1">
    AND sysdate <![CDATA[>]]> m.m_enddate
</if>
<if test="performanceStatus == 2">
    AND sysdate <![CDATA[<]]> m.m_startdate
</if>
<if test="performanceStatus == null or performanceStatus == ''">
    AND sysdate BETWEEN m.m_startdate AND m.m_enddate
</if>

    GROUP BY 
        m.m_time, m.m_age, m.m_notice, m.m_startdate, m.m_enddate, mh.mh_name, m.m_title, m.m_poster
</select>


<select id="getusersInfo" resultType="com.muse.member.model.MemberDTO" parameterType="String">
select * from users where u_id = #{u_id}
</select>

<!-- 시트관련 sql -->




  <select id="seatLayoutSelectPartner" resultType="com.muse.seat.model.SeatLayoutDTO" parameterType="com.muse.seat.model.SeatDTO">
		SELECT *
		FROM musical_hall_layout hl
		JOIN seat_layout sl ON hl.lt_code = sl.lt_code
		where <!-- sl_bind=2 AND --> MHL_CODE = #{mhl_code}
	</select>
	
	<select id="sectionSelectPartner" resultType="java.lang.String" parameterType="com.muse.seat.model.SeatDTO">
		SELECT distinct sl_section
		FROM musical_hall_layout hl
		JOIN seat_layout sl ON hl.lt_code = sl.lt_code
		where <!-- sl_bind=2 AND --> MHL_CODE = #{mhl_code}
		
	</select>
	
	<select id="bindByallFloorSelectPartner" resultType="Integer" parameterType="com.muse.seat.model.SeatDTO">
		SELECT distinct sl_floor
		FROM musical_hall_layout hl
		JOIN seat_layout sl ON hl.lt_code = sl.lt_code
		where <!-- sl_bind=2 AND --> MHL_CODE = #{mhl_code}
	</select>
	
	<resultMap id="MaxRowResultMapPartner" type="java.util.HashMap">
	    <result property="sl_floor_key" column="sl_floor_key"/>
	    <result property="max_row" column="max_row"/>
	</resultMap>
	
	<!-- select 태그에서 resultMap 사용 -->
	<select id="max_rowSelectPartner" resultMap="MaxRowResultMapPartner" parameterType="com.muse.seat.model.SeatDTO">
	      SELECT sl_floor AS sl_floor_key, MAX(sl_row) AS max_row
	    FROM seat_layout sl, MUSICAL_HALL_LAYOUT mhl
	    WHERE 
            sl.lt_code = mhl.mhl_code and
        MHL_CODE = #{mhl_code}
	    GROUP BY sl_floor
	    ORDER BY sl_floor
	</select>
	
	<select id="getRealSeatPartner" resultType="com.muse.seat.model.SeatDTO">
		select *
		from seat
		where m_code = 'm_2'
	</select>
	
	<!-- batch insert -->
	<insert id="insertSeatListPartner" parameterType="com.muse.seat.model.SeatDTO">
    INSERT INTO SEAT (
            S_CODE, SG_CODE, M_CODE, MHL_CODE, 
            S_SECTION, S_POSITION, S_ROW, S_FLOOR
        ) 
        VALUES (
            seat_s_code.nextval,
            #{sg_code},
            #{m_code},
            #{mhl_code},
            #{s_section},
            #{s_position},
            #{s_row},
            #{s_floor}
        )
	</insert>
	<select id="selectLayout" resultType="com.muse.seat.model.SeatDTO" parameterType="String">
		select * from musical_hall_layout 
		where mh_code = #{mh_code}
	</select>
	<insert id="insertSeatPrice" parameterType="com.muse.partner.model.SeatGradeDTO">
	insert into seat_price values
	('sp_'||SEAT_PRICE_SP_CODE.nextval,
	#{m_code},
	#{sg_code},
	#{sp_price})
	</insert>
	<select id="getReqeustList" resultType="com.muse.partner.model.MusicalDTO" parameterType="map">
	    SELECT 
        m.m_code,
        rt.rt_name,
        CASE 
            WHEN op.on_type IS NOT NULL THEN m.m_title || ' 티켓 ' || op.on_type
            ELSE m.m_title
        END AS m_title,
        TO_CHAR(sr.rs_date, 'YYYY-MM-DD') AS rs_date,
        CASE 
            WHEN sr.rs_code = 0 THEN '대기중'
            WHEN sr.rs_code = 1 THEN '승인'
            WHEN sr.rs_code = 2 THEN '반려'
        END AS rs_status,
        op.on_code  
    FROM service_request sr 
    JOIN musical m ON sr.m_code = m.m_code
    JOIN request_type rt ON sr.rt_code = rt.rt_code 
    LEFT JOIN open_notice op ON op.m_code = m.m_code
    WHERE m.pr_code = #{pr_code}
    <if test="isFutureDate == 0">
        AND m.m_startdate <![CDATA[>]]> sysdate
    </if>
    <if test="isFutureDate == 1">
        AND m.m_startdate <![CDATA[<]]> sysdate
    </if>
	</select>
  </mapper>